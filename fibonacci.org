* def
def:

\[F_n = F_{n - 1} + F_{n - 2}\]

the Fibonacci sequence:

\[F_1 = 1, F_2 = 1\]

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

or

\[F_0 = 0, F_1 = 1\]

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

* python code
#+begin_src python :exports both :results output code
## method 1: Using looping technique
def fib(n):
    a,b = 1,1
    for i in range(n-1):
        a,b = b,a+b
    return a


## method 2: Using recursion
def fibR(n):
    if n==1 or n==2:
        return 1
    return fib(n-1)+fib(n-2)


print('serialize using list comprehension')
print([fib(x) for x in range(1, 10)])
print([fibR(x) for x in range(1, 10)])

print('serialize using map')
print(list(map(fib, range(1, 10))))
print(list(map(fibR, range(1, 10))))
#+end_src

#+RESULTS:
#+BEGIN_SRC python
serialize using list comprehension
[1, 1, 2, 3, 5, 8, 13, 21, 34]
[1, 1, 2, 3, 5, 8, 13, 21, 34]
serialize using map
[1, 1, 2, 3, 5, 8, 13, 21, 34]
[1, 1, 2, 3, 5, 8, 13, 21, 34]
#+END_SRC

* R code
#+begin_src R :exports both :results output code
# by the book
fib = function(n) {
    if (n == 1L || n == 2L)
        return(1L)
    else {
        a = 0L
        b = 1L
        for (i in 1L:(n)) {
            tmp = a + b
            a = b
            b = tmp
        }
        return(a)
    }
}

# recursive version
fibR = function(n) {
    if (n == 1L || n == 2L)
        return(1L)
    return(fibR(n - 1) + fibR(n - 2))
}

# math, Binet's Fibonacci Number Formula
fibM = function(n) {
    phi = (1 + sqrt(5))/2
    psi = (1 - sqrt(5))/2
    res = (phi**n - psi**n)/sqrt(5)
    return(res)
}

cat('by the book method\n')
print(sapply(1:10, fib))
cat('recursive method\n')
print(sapply(1:10, fibR))
cat('Binet\'s formula\n')
print(sapply(1:10, fibM))
#+end_src

#+RESULTS:
#+BEGIN_SRC R
by the book method
 [1]  1  1  2  3  5  8 13 21 34 55
recursive method
 [1]  1  1  2  3  5  8 13 21 34 55
Binet's formula
 [1]  1  1  2  3  5  8 13 21 34 55
#+END_SRC
